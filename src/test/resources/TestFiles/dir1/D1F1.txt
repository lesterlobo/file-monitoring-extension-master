asdadasdadadada/*
 *  Copyright 2020. AppDynamics LLC and its affiliates.
 *  All Rights Reserved.
 *  This is unpublished proprietary source code of AppDynamics LLC and its affiliates.
 *  The copyright notice above does not evidence any actual or intended publication of such source code.
 *
 */

package com.appdynamics.extensions.filewatcher.processors;
/*
 * @author Asdsdsdditya Jagtiani
 */

dfdfdffd
import com.appdynamics.extensions.MetricWriteHelper;
import com.appdynamics.extensions.filewatcher.config.FileMetric;
import com.appdynamics.extensions.filewatcher.config.PathToProcess;
import com.appdynamics.extensions.filewatcher.helpers.GlobPathMatcher;
import com.appdynamics.extensions.filewatcher.util.FileWatcherUtil;
import com.appdynamics.extensions.logging.ExtensionsLoggerFactory;
import com.google.common.collect.Maps;
import org.slf4j.Logger;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.Map;

public class FileWalker implements Runnable {
    private static final Logger LOGGER = ExtensionsLoggerFactory.getLogger(FileWalker.class);
    private Path start;
    private WatchService watchService;
    private Map<String, FileMetric> fileMetrics;
    private String baseDirectory;
    private PathToProcess pathToProcess;
    private Map<WatchKey, Path> keys;
    private FileMetricsProcessor fileMetricsProcessor;
    private MetricWriteHelper metricWriteHelper;


    public FileWalker(Path start, WatchService watchService, String baseDirectory, PathToProcess pathToProcess,
               Map<WatchKey, Path> keys, MetricWriteHelper metricWriteHelper, FileMetricsProcessor fileMetricsProcessor) {
        this.start = start;
        this.watchService = watchService;
        this.baseDirectory = baseDirectory;
        this.pathToProcess = pathToProcess;
        this.keys = keys;
        this.metricWriteHelper = metricWriteHelper;
        this.fileMetricsProcessor = fileMetricsProcessor;
        fileMetrics = Maps.newHashMap();
    }

    public void run() {
        LOGGER.info("Attempting to walk directory {}", start.getFileName());
        try {
            GlobPathMatcher globPathMatcher = (GlobPathMatcher) FileWatcherUtil.getPathMatcher(pathToProcess);
            Files.walkFileTree(start, new CustomFileVisitor(baseDirectory,
                    watchService, keys, globPathMatcher, pathToProcess, fileMetrics));
            metricWriteHelper.transformAndPrintMetrics(fileMetricsProcessor.getMetricList(fileMetrics));
        }
        catch (IOException ex) {
            LOGGER.error("Error encountered while walking File {}", baseDirectory, ex);
        }
    }
}